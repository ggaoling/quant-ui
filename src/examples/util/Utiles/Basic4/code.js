const code = `
<pre class="prettyprint linenums prettyprinted" data-anchor-id="rzui" style=""><ol class="linenums"><li class="L0"><code><span class="kwd">var</span><span class="pln"> throttle </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">'./throttle'</span><span class="pun">);</span></code></li><li class="L1"><code></code></li><li class="L2"><code><span class="com">/**</span></code></li><li class="L3"><code><span class="com"> * @desc 函数防抖 </span></code></li><li class="L4"><code><span class="com"> * 与throttle不同的是，debounce保证一个函数在多少毫秒内不再被触发，只会执行一次，</span></code></li><li class="L5"><code><span class="com"> * 要么在第一次调用return的防抖函数时执行，要么在延迟指定毫秒后调用。</span></code></li><li class="L6"><code><span class="com"> * @example 适用场景：如在线编辑的自动存储防抖。</span></code></li><li class="L7"><code><span class="com"> * @param  {Number}   delay         0或者更大的毫秒数。 对于事件回调，大约100或250毫秒（或更高）的延迟是最有用的。</span></code></li><li class="L8"><code><span class="com"> * @param  {Boolean}  atBegin       可选，默认为false。</span></code></li><li class="L9"><code><span class="com"> *                                  如果'atBegin'为false或未传入，回调函数则在第一次调用return的防抖函数后延迟指定毫秒调用。</span></code></li><li class="L0"><code><span class="com">                                    如果'atBegin'为true，回调函数则在第一次调用return的防抖函数时直接执行</span></code></li><li class="L1"><code><span class="com"> * @param  {Function} callback      延迟毫秒后执行的函数。'this'上下文和所有参数都是按原样传递的，</span></code></li><li class="L2"><code><span class="com"> *                                  执行去抖动功能时，，调用'callback'。</span></code></li><li class="L3"><code><span class="com"> *</span></code></li><li class="L4"><code><span class="com"> * @return {Function} 新的防抖函数。</span></code></li><li class="L5"><code><span class="com"> */</span></code></li><li class="L6"><code><span class="kwd">function</span><span class="pln"> debounce</span><span class="pun">(</span><span class="pln">delay</span><span class="pun">,</span><span class="pln"> atBegin</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code><span class="pln">    </span><span class="kwd">return</span><span class="pln"> callback </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> throttle</span><span class="pun">(</span><span class="pln">delay</span><span class="pun">,</span><span class="pln"> atBegin</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">)</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> throttle</span><span class="pun">(</span><span class="pln">delay</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">,</span><span class="pln"> atBegin </span><span class="pun">!==</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">);</span></code></li><li class="L8"><code><span class="pun">};</span></code></li><li class="L9"><code><span class="kwd">module</span><span class="pun">.</span><span class="pln">exports </span><span class="pun">=</span><span class="pln"> debounce</span><span class="pun">;</span></code></li></ol></pre>
`;

export default {
	code,
}